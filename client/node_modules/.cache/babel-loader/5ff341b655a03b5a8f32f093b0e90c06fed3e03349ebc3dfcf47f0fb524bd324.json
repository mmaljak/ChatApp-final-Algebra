{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mario\\\\Desktop\\\\Learning\\\\Algebra-Learning\\\\Front-end\\\\ChatApp-final-Algebra\\\\client\\\\src\\\\components\\\\ChatContainer.js\",\n  _s = $RefreshSig$();\n//Import necessary modules\nimport React, { useEffect, useState } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport ChatBoxReceiver, { ChatBoxSender } from './ChatBox';\nimport InputText from './InputText';\nimport UserLogin from './UserLogin';\n\n//Define component ChatContainer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatContainer() {\n  _s();\n  //Create socket instance\n  let socketio = socketIOClient(\"http://localhost:5000\");\n\n  //Set state variables\n  const [chats, setChats] = useState([]);\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\n  const avatar = localStorage.getItem(\"avatar\");\n\n  //Add effect hook to listen for 'chat' events from socket\n  useEffect(() => {\n    socketio.on('chat', senderChats => {\n      setChats(senderChats);\n    });\n  });\n\n  //Function to emit chat to socket\n  function sendChatToSocket(chat) {\n    socketio.emit(\"chat\", chat);\n  }\n\n  //Function to add message to chats state and emit to socket\n  //This will be called everytime a message has been added to the chat application\n  function addMessage(chat) {\n    const newChat = {\n      ...chat,\n      user,\n      avatar\n    };\n    setChats([...chats, newChat]);\n    sendChatToSocket([...chats, newChat]);\n  }\n\n  //Function to log out user\n  function logout() {\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"avatar\");\n    setUser(\"\");\n  }\n\n  //Function to create chat list\n  function ChatsList() {\n    return chats.map((chat, index) => {\n      if (chat.user === user) return /*#__PURE__*/_jsxDEV(ChatBoxSender, {\n        message: chat.message,\n        avatar: chat.avatar,\n        user: chat.user\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 39\n      }, this);\n      return /*#__PURE__*/_jsxDEV(ChatBoxReceiver, {\n        message: chat.message,\n        avatar: chat.avatar,\n        user: chat.user\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 16\n      }, this);\n    });\n  }\n\n  //Render the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: \"row\",\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Username: \", user]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => logout(),\n          style: {\n            color: \"blue\",\n            cursor: 'pointer'\n          },\n          children: \"Log Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ChatsList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputText, {\n        addMessage: addMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(UserLogin, {\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatContainer, \"RQCKBrdm44e7K4JjVEGR2xh9j7A=\");\n_c = ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useEffect","useState","socketIOClient","ChatBoxReceiver","ChatBoxSender","InputText","UserLogin","jsxDEV","_jsxDEV","ChatContainer","_s","socketio","chats","setChats","user","setUser","localStorage","getItem","avatar","on","senderChats","sendChatToSocket","chat","emit","addMessage","newChat","logout","removeItem","ChatsList","map","index","message","fileName","_jsxFileName","lineNumber","columnNumber","children","style","display","flexDirection","justifyContent","onClick","color","cursor","_c","$RefreshReg$"],"sources":["C:/Users/Mario/Desktop/Learning/Algebra-Learning/Front-end/ChatApp-final-Algebra/client/src/components/ChatContainer.js"],"sourcesContent":["//Import necessary modules\r\nimport React, { useEffect, useState } from 'react'\r\nimport socketIOClient from \"socket.io-client\";\r\nimport ChatBoxReceiver, { ChatBoxSender } from './ChatBox';\r\nimport InputText from './InputText';\r\nimport UserLogin from './UserLogin';\r\n\r\n//Define component ChatContainer\r\nexport default function ChatContainer() {\r\n\r\n    //Create socket instance\r\n    let socketio = socketIOClient(\"http://localhost:5000\")\r\n\r\n    //Set state variables\r\n    const [chats , setChats] = useState([])\r\n    const [user, setUser] = useState(localStorage.getItem(\"user\"))\r\n    const avatar = localStorage.getItem(\"avatar\")\r\n\r\n    //Add effect hook to listen for 'chat' events from socket\r\n    useEffect(()=> {\r\n      socketio.on('chat', senderChats => {\r\n        setChats(senderChats)\r\n      })\r\n    })\r\n\r\n    //Function to emit chat to socket\r\n    function sendChatToSocket(chat){\r\n      socketio.emit(\"chat\", chat)\r\n    }\r\n\r\n    //Function to add message to chats state and emit to socket\r\n    //This will be called everytime a message has been added to the chat application\r\n    function addMessage(chat){\r\n      const newChat = {...chat , user , avatar}\r\n      setChats([...chats , newChat])\r\n      sendChatToSocket([...chats , newChat])\r\n    }\r\n\r\n    //Function to log out user\r\n    function logout(){\r\n      localStorage.removeItem(\"user\")\r\n      localStorage.removeItem(\"avatar\")\r\n      setUser(\"\")\r\n    }\r\n\r\n    //Function to create chat list\r\n    function ChatsList(){\r\n      return chats.map((chat, index) => {\r\n        if(chat.user === user) return <ChatBoxSender key={index} message={chat.message} avatar={chat.avatar} user={chat.user}/>\r\n        return <ChatBoxReceiver key={index} message={chat.message} avatar={chat.avatar} user={chat.user}/>\r\n      })\r\n    }\r\n\r\n  //Render the component\r\n  return (\r\n    <div>\r\n      {\r\n      user ? \r\n      <div>\r\n      <div style={{display:'flex', flexDirection:\"row\", justifyContent: 'space-between'}}>\r\n        <h4>Username: {user}</h4>\r\n        <p onClick={()=> logout()} style={{color:\"blue\", cursor:'pointer'}}>Log Out</p>\r\n      </div>\r\n\r\n        <ChatsList/>\r\n        <InputText addMessage={addMessage} />\r\n      </div>\r\n      :\r\n      \r\n\r\n       <UserLogin setUser={setUser} />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}